(function() {
  var MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES, NAMESPACE, PackageUpdater, WARMUP_WAIT, fs, getFs, path;

  fs = null;

  path = null;

  PackageUpdater = null;

  getFs = function() {
    return fs != null ? fs : fs = require('fs-plus');
  };

  NAMESPACE = 'auto-update-packages';

  WARMUP_WAIT = 10 * 1000;

  MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES = 15;

  module.exports = {
    config: {
      intervalMinutes: {
        type: 'integer',
        minimum: MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES,
        "default": 6 * 60,
        title: 'Auto-Update Interval Minutes'
      }
    },
    activate: function(state) {
      var commands;
      commands = {};
      commands["" + NAMESPACE + ":update-now"] = (function(_this) {
        return function() {
          return _this.updatePackages(false);
        };
      })(this);
      this.commandSubscription = atom.commands.add('atom-workspace', commands);
      return setTimeout((function(_this) {
        return function() {
          return _this.enableAutoUpdate();
        };
      })(this), WARMUP_WAIT);
    },
    deactivate: function() {
      var _ref;
      this.disableAutoUpdate();
      if ((_ref = this.commandSubscription) != null) {
        _ref.dispose();
      }
      return this.commandSubscription = null;
    },
    enableAutoUpdate: function() {
      this.updatePackagesIfAutoUpdateBlockIsExpired();
      this.autoUpdateCheck = setInterval((function(_this) {
        return function() {
          return _this.updatePackagesIfAutoUpdateBlockIsExpired();
        };
      })(this), this.getAutoUpdateCheckInterval());
      return this.configSubscription = atom.config.onDidChange(NAMESPACE, (function(_this) {
        return function() {
          _this.disableAutoUpdate();
          return _this.enableAutoUpdate();
        };
      })(this));
    },
    disableAutoUpdate: function() {
      var _ref;
      if ((_ref = this.configSubscription) != null) {
        _ref.dispose();
      }
      this.configSubscription = null;
      if (this.autoUpdateCheck) {
        clearInterval(this.autoUpdateCheck);
      }
      return this.autoUpdateCheck = null;
    },
    updatePackagesIfAutoUpdateBlockIsExpired: function() {
      var lastUpdateTime;
      lastUpdateTime = this.loadLastUpdateTime() || 0;
      if (Date.now() > lastUpdateTime + this.getAutoUpdateBlockDuration()) {
        return this.updatePackages();
      }
    },
    updatePackages: function(isAutoUpdate) {
      if (isAutoUpdate == null) {
        isAutoUpdate = true;
      }
      if (PackageUpdater == null) {
        PackageUpdater = require('./package-updater');
      }
      PackageUpdater.updatePackages(isAutoUpdate);
      return this.saveLastUpdateTime();
    },
    getAutoUpdateBlockDuration: function() {
      var minutes;
      minutes = atom.config.get("" + NAMESPACE + ".intervalMinutes");
      if (isNaN(minutes) || minutes < MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES) {
        minutes = MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES;
      }
      return minutes * 60 * 1000;
    },
    getAutoUpdateCheckInterval: function() {
      return this.getAutoUpdateBlockDuration() / 15;
    },
    loadLastUpdateTime: function() {
      var string;
      try {
        string = getFs().readFileSync(this.getLastUpdateTimeFilePath());
        return parseInt(string);
      } catch (_error) {
        return null;
      }
    },
    saveLastUpdateTime: function() {
      return getFs().writeFileSync(this.getLastUpdateTimeFilePath(), Date.now().toString());
    },
    getLastUpdateTimeFilePath: function() {
      var dotAtomPath;
      if (path == null) {
        path = require('path');
      }
      dotAtomPath = getFs().absolute('~/.atom');
      return path.join(dotAtomPath, 'storage', "" + NAMESPACE + "-last-update-time");
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2hhY28vLmRvdGZpbGVzLy5hdG9tL3BhY2thZ2VzL2F1dG8tdXBkYXRlLXBhY2thZ2VzL2xpYi9hdXRvLXVwZGF0ZS1wYWNrYWdlcy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsbUdBQUE7O0FBQUEsRUFBQSxFQUFBLEdBQUssSUFBTCxDQUFBOztBQUFBLEVBQ0EsSUFBQSxHQUFPLElBRFAsQ0FBQTs7QUFBQSxFQUVBLGNBQUEsR0FBaUIsSUFGakIsQ0FBQTs7QUFBQSxFQUlBLEtBQUEsR0FBUSxTQUFBLEdBQUE7d0JBQ04sS0FBQSxLQUFNLE9BQUEsQ0FBUSxTQUFSLEVBREE7RUFBQSxDQUpSLENBQUE7O0FBQUEsRUFPQSxTQUFBLEdBQVksc0JBUFosQ0FBQTs7QUFBQSxFQVFBLFdBQUEsR0FBYyxFQUFBLEdBQUssSUFSbkIsQ0FBQTs7QUFBQSxFQVNBLDBDQUFBLEdBQTZDLEVBVDdDLENBQUE7O0FBQUEsRUFXQSxNQUFNLENBQUMsT0FBUCxHQUNFO0FBQUEsSUFBQSxNQUFBLEVBQ0U7QUFBQSxNQUFBLGVBQUEsRUFDRTtBQUFBLFFBQUEsSUFBQSxFQUFNLFNBQU47QUFBQSxRQUNBLE9BQUEsRUFBUywwQ0FEVDtBQUFBLFFBRUEsU0FBQSxFQUFTLENBQUEsR0FBSSxFQUZiO0FBQUEsUUFHQSxLQUFBLEVBQU8sOEJBSFA7T0FERjtLQURGO0FBQUEsSUFPQSxRQUFBLEVBQVUsU0FBQyxLQUFELEdBQUE7QUFDUixVQUFBLFFBQUE7QUFBQSxNQUFBLFFBQUEsR0FBVyxFQUFYLENBQUE7QUFBQSxNQUNBLFFBQVMsQ0FBQSxFQUFBLEdBQUcsU0FBSCxHQUFhLGFBQWIsQ0FBVCxHQUFzQyxDQUFBLFNBQUEsS0FBQSxHQUFBO2VBQUEsU0FBQSxHQUFBO2lCQUFHLEtBQUMsQ0FBQSxjQUFELENBQWdCLEtBQWhCLEVBQUg7UUFBQSxFQUFBO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUR0QyxDQUFBO0FBQUEsTUFFQSxJQUFDLENBQUEsbUJBQUQsR0FBdUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFkLENBQWtCLGdCQUFsQixFQUFvQyxRQUFwQyxDQUZ2QixDQUFBO2FBSUEsVUFBQSxDQUFXLENBQUEsU0FBQSxLQUFBLEdBQUE7ZUFBQSxTQUFBLEdBQUE7aUJBQ1QsS0FBQyxDQUFBLGdCQUFELENBQUEsRUFEUztRQUFBLEVBQUE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVgsRUFFRSxXQUZGLEVBTFE7SUFBQSxDQVBWO0FBQUEsSUFnQkEsVUFBQSxFQUFZLFNBQUEsR0FBQTtBQUNWLFVBQUEsSUFBQTtBQUFBLE1BQUEsSUFBQyxDQUFBLGlCQUFELENBQUEsQ0FBQSxDQUFBOztZQUNvQixDQUFFLE9BQXRCLENBQUE7T0FEQTthQUVBLElBQUMsQ0FBQSxtQkFBRCxHQUF1QixLQUhiO0lBQUEsQ0FoQlo7QUFBQSxJQXFCQSxnQkFBQSxFQUFrQixTQUFBLEdBQUE7QUFDaEIsTUFBQSxJQUFDLENBQUEsd0NBQUQsQ0FBQSxDQUFBLENBQUE7QUFBQSxNQUVBLElBQUMsQ0FBQSxlQUFELEdBQW1CLFdBQUEsQ0FBWSxDQUFBLFNBQUEsS0FBQSxHQUFBO2VBQUEsU0FBQSxHQUFBO2lCQUM3QixLQUFDLENBQUEsd0NBQUQsQ0FBQSxFQUQ2QjtRQUFBLEVBQUE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVosRUFFakIsSUFBQyxDQUFBLDBCQUFELENBQUEsQ0FGaUIsQ0FGbkIsQ0FBQTthQU1BLElBQUMsQ0FBQSxrQkFBRCxHQUFzQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVosQ0FBd0IsU0FBeEIsRUFBbUMsQ0FBQSxTQUFBLEtBQUEsR0FBQTtlQUFBLFNBQUEsR0FBQTtBQUN2RCxVQUFBLEtBQUMsQ0FBQSxpQkFBRCxDQUFBLENBQUEsQ0FBQTtpQkFDQSxLQUFDLENBQUEsZ0JBQUQsQ0FBQSxFQUZ1RDtRQUFBLEVBQUE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQW5DLEVBUE47SUFBQSxDQXJCbEI7QUFBQSxJQWdDQSxpQkFBQSxFQUFtQixTQUFBLEdBQUE7QUFDakIsVUFBQSxJQUFBOztZQUFtQixDQUFFLE9BQXJCLENBQUE7T0FBQTtBQUFBLE1BQ0EsSUFBQyxDQUFBLGtCQUFELEdBQXNCLElBRHRCLENBQUE7QUFHQSxNQUFBLElBQW1DLElBQUMsQ0FBQSxlQUFwQztBQUFBLFFBQUEsYUFBQSxDQUFjLElBQUMsQ0FBQSxlQUFmLENBQUEsQ0FBQTtPQUhBO2FBSUEsSUFBQyxDQUFBLGVBQUQsR0FBbUIsS0FMRjtJQUFBLENBaENuQjtBQUFBLElBdUNBLHdDQUFBLEVBQTBDLFNBQUEsR0FBQTtBQUN4QyxVQUFBLGNBQUE7QUFBQSxNQUFBLGNBQUEsR0FBaUIsSUFBQyxDQUFBLGtCQUFELENBQUEsQ0FBQSxJQUF5QixDQUExQyxDQUFBO0FBQ0EsTUFBQSxJQUFHLElBQUksQ0FBQyxHQUFMLENBQUEsQ0FBQSxHQUFhLGNBQUEsR0FBaUIsSUFBQyxDQUFBLDBCQUFELENBQUEsQ0FBakM7ZUFDRSxJQUFDLENBQUEsY0FBRCxDQUFBLEVBREY7T0FGd0M7SUFBQSxDQXZDMUM7QUFBQSxJQTRDQSxjQUFBLEVBQWdCLFNBQUMsWUFBRCxHQUFBOztRQUFDLGVBQWU7T0FDOUI7O1FBQUEsaUJBQWtCLE9BQUEsQ0FBUSxtQkFBUjtPQUFsQjtBQUFBLE1BQ0EsY0FBYyxDQUFDLGNBQWYsQ0FBOEIsWUFBOUIsQ0FEQSxDQUFBO2FBRUEsSUFBQyxDQUFBLGtCQUFELENBQUEsRUFIYztJQUFBLENBNUNoQjtBQUFBLElBaURBLDBCQUFBLEVBQTRCLFNBQUEsR0FBQTtBQUMxQixVQUFBLE9BQUE7QUFBQSxNQUFBLE9BQUEsR0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVosQ0FBZ0IsRUFBQSxHQUFHLFNBQUgsR0FBYSxrQkFBN0IsQ0FBVixDQUFBO0FBRUEsTUFBQSxJQUFHLEtBQUEsQ0FBTSxPQUFOLENBQUEsSUFBa0IsT0FBQSxHQUFVLDBDQUEvQjtBQUNFLFFBQUEsT0FBQSxHQUFVLDBDQUFWLENBREY7T0FGQTthQUtBLE9BQUEsR0FBVSxFQUFWLEdBQWUsS0FOVztJQUFBLENBakQ1QjtBQUFBLElBeURBLDBCQUFBLEVBQTRCLFNBQUEsR0FBQTthQUMxQixJQUFDLENBQUEsMEJBQUQsQ0FBQSxDQUFBLEdBQWdDLEdBRE47SUFBQSxDQXpENUI7QUFBQSxJQThEQSxrQkFBQSxFQUFvQixTQUFBLEdBQUE7QUFDbEIsVUFBQSxNQUFBO0FBQUE7QUFDRSxRQUFBLE1BQUEsR0FBUyxLQUFBLENBQUEsQ0FBTyxDQUFDLFlBQVIsQ0FBcUIsSUFBQyxDQUFBLHlCQUFELENBQUEsQ0FBckIsQ0FBVCxDQUFBO2VBQ0EsUUFBQSxDQUFTLE1BQVQsRUFGRjtPQUFBLGNBQUE7ZUFJRSxLQUpGO09BRGtCO0lBQUEsQ0E5RHBCO0FBQUEsSUFxRUEsa0JBQUEsRUFBb0IsU0FBQSxHQUFBO2FBQ2xCLEtBQUEsQ0FBQSxDQUFPLENBQUMsYUFBUixDQUFzQixJQUFDLENBQUEseUJBQUQsQ0FBQSxDQUF0QixFQUFvRCxJQUFJLENBQUMsR0FBTCxDQUFBLENBQVUsQ0FBQyxRQUFYLENBQUEsQ0FBcEQsRUFEa0I7SUFBQSxDQXJFcEI7QUFBQSxJQXdFQSx5QkFBQSxFQUEyQixTQUFBLEdBQUE7QUFDekIsVUFBQSxXQUFBOztRQUFBLE9BQVEsT0FBQSxDQUFRLE1BQVI7T0FBUjtBQUFBLE1BQ0EsV0FBQSxHQUFjLEtBQUEsQ0FBQSxDQUFPLENBQUMsUUFBUixDQUFpQixTQUFqQixDQURkLENBQUE7YUFFQSxJQUFJLENBQUMsSUFBTCxDQUFVLFdBQVYsRUFBdUIsU0FBdkIsRUFBa0MsRUFBQSxHQUFHLFNBQUgsR0FBYSxtQkFBL0MsRUFIeUI7SUFBQSxDQXhFM0I7R0FaRixDQUFBO0FBQUEiCn0=

//# sourceURL=/Users/haco/.dotfiles/.atom/packages/auto-update-packages/lib/auto-update-packages.coffee
